package com.example.myanimelist.ui.search

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.activity.compose.LocalActivity
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.expandVertically
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyListScope
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.ComposeView
import androidx.fragment.app.Fragment
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import androidx.navigation.findNavController
import androidx.navigation.fragment.navArgs
import com.example.myanimelist.data.remote.ApiResponse
import com.example.myanimelist.data.remote.anime.AnimeDto
import com.example.myanimelist.data.remote.character.CharacterDto
import com.example.myanimelist.data.remote.manga.MangaDto
import com.example.myanimelist.data.remote.people.PeopleDto
import com.example.myanimelist.ui.NavGraphDirections
import com.example.myanimelist.ui.components.CardItem
import com.example.myanimelist.ui.screen.top.ExpandableHeader
import com.example.myanimelist.ui.screen.top.loadingIndicator
import com.example.myanimelist.ui.viewmodel.AnimeViewModel
import com.example.myanimelist.ui.viewmodel.CharacterViewModel
import com.example.myanimelist.ui.viewmodel.MangaViewModel
import com.example.myanimelist.ui.viewmodel.PeopleViewModel
import com.example.myanimelist.utils.toggleLoading
import kotlinx.coroutines.delay

class SearchFragment : Fragment() {

    private val args by navArgs<SearchFragmentArgs>() // auto-generated by Safe Args

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        return ComposeView(requireContext()).apply {
            setContent {
                val animeViewModel: AnimeViewModel = hiltViewModel()
                val mangaViewModel: MangaViewModel = hiltViewModel()
                val characterViewModel: CharacterViewModel = hiltViewModel()
                val peopleViewModel: PeopleViewModel = hiltViewModel()
                val navController: NavController = findNavController()

                val queryFlow = navController.currentBackStackEntry
                    ?.savedStateHandle
                    ?.getStateFlow("query", args.query)

                val typeFlow = navController.currentBackStackEntry
                    ?.savedStateHandle
                    ?.getStateFlow("type", args.type)

                val query by queryFlow?.collectAsState() ?: remember { mutableStateOf(args.query) }
                val type by typeFlow?.collectAsState() ?: remember { mutableStateOf(args.type) }

                Column(modifier = Modifier.fillMaxSize())
                {
                    SearchBarWithDropdown(
                        navController,
                        query,
                        defaultType = type,
                        isFromSearchFragment = true
                    )
                    SearchScreen(
                        query = query,
                        type = type,
                        animeViewModel = animeViewModel,
                        mangaViewModel = mangaViewModel,
                        characterViewModel = characterViewModel,
                        peopleViewModel = peopleViewModel,
                        navController
                    )
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SearchScreen(
    query: String,
    type: String = "All",
    animeViewModel: AnimeViewModel,
    mangaViewModel: MangaViewModel,
    characterViewModel: CharacterViewModel,
    peopleViewModel: PeopleViewModel,
    navController: NavController
) {
    LaunchedEffect(query, type) {
        when (type) {
            "Anime" -> {
                animeViewModel.searchAnime(query, type)
            }

            "Manga" -> {
                mangaViewModel.searchManga(query, type)
            }

            "Character" -> {
                characterViewModel.searchCharacter(query, type)
            }

            "People" -> {
                peopleViewModel.searchPeople(query, type)
            }

            "All" -> {
                animeViewModel.searchAnime(query, type)
                delay(500) // optional pause
                mangaViewModel.searchManga(query, type)
                delay(1000) // optional pause
                characterViewModel.searchCharacter(query, type)
                delay(1000) // optional pause
                peopleViewModel.searchPeople(query, type)
            }
        }
    }

//    Text(
//        text = "Results for \"$query\"",
//        textAlign = TextAlign.Center,
//        modifier = Modifier.padding(8.dp)
//    )

    val searchAnimeState by animeViewModel.searchResults.collectAsState()
    var animeExpanded by rememberSaveable { mutableStateOf(true) }

    val searchMangaState by mangaViewModel.searchResults.collectAsState()
    var mangaExpanded by rememberSaveable { mutableStateOf(true) }

    val searchCharacterState by characterViewModel.searchResults.collectAsState()
    var characterExpanded by rememberSaveable { mutableStateOf(true) }

    val searchPeopleState by peopleViewModel.searchResults.collectAsState()
    var peopleExpanded by rememberSaveable { mutableStateOf(true) }

    val context = LocalActivity.current

    val itemsCount = if (type == "All") 5 else 10

    LazyColumn(modifier = Modifier.fillMaxSize()) {
        if (type == "All" || type == "Anime") {
            if (searchAnimeState is ApiResponse.Loading) {
                loadingIndicator(context!!)
            } else if (searchAnimeState is ApiResponse.Success) {
                val successData = (searchAnimeState as ApiResponse.Success<List<AnimeDto>>).data
                val sorted = successData.sortedByDescending { it.favorites }
                if (successData.isNotEmpty()) {
                    resultsSectionHeader(
                        "Anime Results",
                        animeExpanded
                    ) { animeExpanded = !animeExpanded }
                    items(sorted.take(itemsCount)) { anime ->
                        ResultsList(
                            visible = animeExpanded,
                            malId = anime.malId,
                            imageUrl = anime.images.jpg.largeImageUrl,
                            title = anime.title,
                            subtitle = "(${anime.type}, ${extractLastYear(anime.aired.string)})",
                            mediaType = "anime",
                            navController = navController
                        )
                    }
                }
            }
        }

        if (type == "All" || type == "Manga") {
            if (searchMangaState is ApiResponse.Loading) {
                loadingIndicator(context!!)
            } else if (searchMangaState is ApiResponse.Success) {
                val successData = (searchMangaState as ApiResponse.Success<List<MangaDto>>).data
                val sorted = successData.sortedByDescending { it.favorites }
                if (successData.isNotEmpty()) {
                    resultsSectionHeader(
                        "Manga Results",
                        mangaExpanded
                    ) { mangaExpanded = !mangaExpanded }
                    items(sorted.take(itemsCount)) { manga ->
                        ResultsList(
                            visible = mangaExpanded,
                            malId = manga.malId,
                            imageUrl = manga.images.jpg.largeImageUrl,
                            title = manga.title,
                            subtitle = "(${manga.type}, ${extractLastYear(manga.published.string)})",
                            mediaType = "manga",
                            navController = navController
                        )
                    }
                }
            }
        }

        if (type == "All" || type == "Character") {
            if (searchCharacterState is ApiResponse.Loading) {
                loadingIndicator(context!!)
            } else if (searchCharacterState is ApiResponse.Success) {
                val successData =
                    (searchCharacterState as ApiResponse.Success<List<CharacterDto>>).data
                val sorted = successData.sortedByDescending { it.favorites }
                if (successData.isNotEmpty()) {
                    resultsSectionHeader(
                        "Character Results",
                        characterExpanded
                    ) { characterExpanded = !characterExpanded }
                    items(sorted.take(itemsCount)) { character ->
                        ResultsList(
                            visible = characterExpanded,
                            malId = character.malId,
                            imageUrl = character.images.jpg.imageUrl,
                            title = character.name ?: "",
                            subtitle = "",
                            mediaType = "character",
                            navController = navController
                        )
                    }
                }
            }
        }

        if (type == "All" || type == "People") {
            if (searchPeopleState is ApiResponse.Loading) {
                loadingIndicator(context!!)
            } else if (searchPeopleState is ApiResponse.Success) {
                val successData = (searchPeopleState as ApiResponse.Success<List<PeopleDto>>).data
                val sorted = successData.sortedByDescending { it.favorites }
                if (successData.isNotEmpty()) {
                    resultsSectionHeader(
                        "People Results",
                        peopleExpanded
                    ) { peopleExpanded = !peopleExpanded }
                    items(sorted.take(itemsCount)) { people ->
                        ResultsList(
                            visible = peopleExpanded,
                            malId = people.malId,
                            imageUrl = people.images.jpg.imageUrl,
                            title = people.name,
                            subtitle = "",
                            mediaType = "people",
                            navController = navController
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun ResultsList(
    visible: Boolean,
    malId: Int,
    imageUrl: String = "",
    title: String = "",
    subtitle: String = "",
    mediaType: String = "",
    navController: NavController
) {
    AnimatedVisibility(
        visible = visible,
        enter = expandVertically(),
        exit = shrinkVertically()
    ) {
        CardItem(
            malId = malId,
            imageUrl = imageUrl,
            title = title,
            subtitle = subtitle,
            modifier = Modifier.fillMaxWidth(),
            onItemClick = {
                val action = NavGraphDirections.actionGlobalDetail(
                    malId,
                    mediaType
                )
                navController.navigate(action)
            }
        )
    }
}

fun LazyListScope.resultsSectionHeader(
    headerTitle: String,
    isExpanded: Boolean,
    onToggleExpanded: () -> Unit
) {
    stickyHeader {
        LocalActivity.current?.toggleLoading(false)
        ExpandableHeader(
            title = headerTitle,
            isExpanded = isExpanded,
            style = MaterialTheme.typography.headlineSmall,
            onToggleExpanded = onToggleExpanded
        )
    }
}

fun extractLastYear(input: String?): String? {
    val regex = Regex("""\b\d{4}\b""")
    return regex.findAll(input ?: "").lastOrNull()?.value
}