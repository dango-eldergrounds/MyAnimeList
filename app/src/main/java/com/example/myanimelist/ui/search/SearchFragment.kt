package com.example.myanimelist.ui.search

import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.expandVertically
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.ComposeView
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.fragment.app.Fragment
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import androidx.navigation.findNavController
import androidx.navigation.fragment.navArgs
import com.example.myanimelist.data.remote.ApiResponse
import com.example.myanimelist.data.remote.anime.AnimeDto
import com.example.myanimelist.data.remote.manga.MangaDto
import com.example.myanimelist.ui.NavGraphDirections
import com.example.myanimelist.ui.components.CardItem
import com.example.myanimelist.ui.screen.top.ExpandableHeader
import com.example.myanimelist.ui.screen.top.loadingIndicator
import com.example.myanimelist.ui.viewmodel.AnimeViewModel
import com.example.myanimelist.ui.viewmodel.CharacterViewModel
import com.example.myanimelist.ui.viewmodel.MangaViewModel
import com.example.myanimelist.ui.viewmodel.PeopleViewModel

class SearchFragment : Fragment() {

    private val args by navArgs<SearchFragmentArgs>() // auto-generated by Safe Args

    override fun onCreateView(
        inflater: android.view.LayoutInflater,
        container: android.view.ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        return ComposeView(requireContext()).apply {
            setContent {
                val animeViewModel: AnimeViewModel = hiltViewModel()
                val mangaViewModel: MangaViewModel = hiltViewModel()
                val characterViewModel: CharacterViewModel = hiltViewModel()
                val peopleViewModel: PeopleViewModel = hiltViewModel()
                val navController: NavController = findNavController()
                SearchScreen(
                    query = args.query,
                    animeViewModel = animeViewModel,
                    mangaViewModel = mangaViewModel,
                    navController
                )
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SearchScreen(
    query: String,
    animeViewModel: AnimeViewModel,
    mangaViewModel: MangaViewModel,
    navController: NavController
) {
    // Call ViewModel search methods (use LaunchedEffect to run once)
    LaunchedEffect(query) {
        animeViewModel.searchAnime(query)
        mangaViewModel.searchManga(query)
    }

    // Show UI for results
    Text(
        text = "Results for \"$query\"",
        textAlign = TextAlign.Center,
        modifier = Modifier.padding(8.dp)
    )

    val searchAnimeState by animeViewModel.searchResults.collectAsState()
    val searchMangaState by mangaViewModel.searchResults.collectAsState()

    var animeExpanded by rememberSaveable { mutableStateOf(true) }
    var mangaExpanded by rememberSaveable { mutableStateOf(true) }
    var characterExpanded by rememberSaveable { mutableStateOf(true) }
    var peopleExpanded by rememberSaveable { mutableStateOf(true) }

    var searchText by remember { mutableStateOf(query) }

//    SearchBar(
//        query = searchText,
//        onQueryChange = {
//            searchText = it
//        },
//        onSearch = { query ->
////            SearchScreen(query, animeViewModel, mangaViewModel)
//        },
//        active = false,
//        onActiveChange = { /* DO NOTHING */ },
//        modifier = Modifier
//            .fillMaxWidth()
//            .height(60.dp)
//            .padding(start = 8.dp, top = 8.dp, end = 8.dp, bottom = 8.dp),
//        placeholder = { Text("Search anime or manga...") },
//        trailingIcon = {
//            Icon(
//                imageVector = Icons.Default.Search,
//                contentDescription = "Search"
//            )
//        }
//    ) {
//    }

    LazyColumn(modifier = Modifier.fillMaxSize()) {

        if (searchAnimeState is ApiResponse.Loading) {
            loadingIndicator()
        } else if (searchAnimeState is ApiResponse.Success) {
            val successData = (searchAnimeState as ApiResponse.Success<List<AnimeDto>>).data
            Log.i(
                "Search Result",
                "Is successData empty? ${successData.isEmpty()} Count ${successData.count()}"
            )
            stickyHeader {
                ExpandableHeader(
                    title = "Anime Results",
                    isExpanded = animeExpanded,
                    onToggleExpanded = { animeExpanded = !animeExpanded })
            }

            val sorted = successData.sortedByDescending { it.favorites }

            items(sorted.take(10)) { anime ->
                AnimatedVisibility(
                    visible = animeExpanded,
                    enter = expandVertically(),
                    exit = shrinkVertically()
                ) {
                    CardItem(
                        malId = anime.malId,
                        imageUrl = anime.images.jpg.largeImageUrl,
                        title = anime.title,
                        subtitle = "(${anime.type}, ${extractLastYear(anime.aired.string)})",
                        modifier = Modifier.fillMaxWidth(),
                        onItemClick = {
                            val action = NavGraphDirections.actionGlobalDetail(
                                anime.malId,
                                "anime"
                            )
                            navController.navigate(action)
                        }
                    )
                }
            }
        }

        if (searchMangaState is ApiResponse.Loading) {
            loadingIndicator()
        } else if (searchMangaState is ApiResponse.Success) {
            val successData = (searchMangaState as ApiResponse.Success<List<MangaDto>>).data
            Log.i(
                "Search Result",
                "Is successData empty? ${successData.isEmpty()} Count ${successData.count()}"
            )
            stickyHeader {
                ExpandableHeader(
                    title = "Manga Results",
                    isExpanded = mangaExpanded,
                    style = MaterialTheme.typography.headlineSmall,
                    onToggleExpanded = { mangaExpanded = !mangaExpanded })
            }

            val sorted = successData.sortedByDescending { it.favorites }

            items(sorted.take(10)) { manga ->
                AnimatedVisibility(
                    visible = mangaExpanded,
                    enter = expandVertically(),
                    exit = shrinkVertically()
                ) {
                    CardItem(
                        malId = manga.malId,
                        imageUrl = manga.images.jpg.largeImageUrl,
                        title = manga.title,
                        subtitle = "(${manga.type}, ${extractLastYear(manga.published.string)})",
                        modifier = Modifier.fillMaxWidth(),
                        onItemClick = {
                            val action = NavGraphDirections.actionGlobalDetail(
                                manga.malId,
                                "manga"
                            )
                            navController.navigate(action)
                        }
                    )
                }
            }
        }
    }
}

fun extractLastYear(input: String?): String? {
    val regex = Regex("""\b\d{4}\b""")
    return regex.findAll(input ?: "").lastOrNull()?.value
}